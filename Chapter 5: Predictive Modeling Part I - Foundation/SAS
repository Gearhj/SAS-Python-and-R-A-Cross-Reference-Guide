
/*Logistic Regression*/ 
LIBNAME james 'INPUT FILE PATHWAY';

/* Load the data */
DATA train_encoded;
  SET james.train_encoded;
RUN;

DATA oot_encoded;
  SET james.oot_encoded;
RUN;

%let target = bad;

/* Define the variables to exclude to avoid the dummy variable trap */
%LET excluded_variables = id bad emp_length_3years term_36months grade_g sub_grade_b4 
verification_status_sourceverifi purpose_home_improvement home_ownership_rent application_type_jointapp;

/* Create global variable for predictors */
PROC CONTENTS NOPRINT DATA = train_encoded (DROP= id &target. &excluded_variables.) OUT = var (KEEP = name); RUN;
PROC SQL NOPRINT; SELECT name INTO:predictors SEPARATED BY " " FROM var; QUIT;
%PUT &predictors; RUN;

/*Fit regression model and calculate VIF values*/
PROC REG DATA=train_encoded ;
  MODEL &target. = &predictors. / VIF;
RUN;

%let high_corr = GRADE_B int_rate;

/* Remove correlated variables and create final global variable for predictors */
PROC CONTENTS NOPRINT DATA = train_encoded (DROP= id &target. &excluded_variables. &high_corr.) OUT = var (KEEP = name); RUN;
PROC SQL NOPRINT; SELECT name INTO:predictors SEPARATED BY " " FROM var; QUIT;
%PUT &predictors; RUN;

/* Variables in train_encoded but not in oot_encoded */
PROC SQL NOPRINT;
  CREATE TABLE train_vars AS SELECT name FROM dictionary.columns WHERE libname="WORK" AND memname="TRAIN_ENCODED";
  CREATE TABLE oot_vars AS SELECT name FROM dictionary.columns WHERE libname="WORK" AND memname="OOT_ENCODED";
  CREATE TABLE in_train_not_oot AS
  SELECT * FROM train_vars
  EXCEPT
  SELECT * FROM oot_vars;
QUIT;

/* Print the differences */
PROC PRINT DATA=in_train_not_oot; RUN;

/* Create final train and OOT datasets */
DATA train_encoded_final;
  SET train_encoded (KEEP=&predictors bad);
RUN;

PROC FREQ DATA=train_encoded_final; TABLE bad; RUN;

/*Create missing variables from TRAIN dataset*/
DATA oot_encoded_final;
  SET oot_encoded ;
  home_ownership_ANY = 0;
  purpose_wedding = 0;
  KEEP &predictors bad  home_ownership_ANY purpose_wedding;
RUN;

PROC FREQ DATA=oot_encoded_final; TABLE bad; RUN;

/* Split the modeling dataset by a 80/20 ratio using a random seed */
PROC SURVEYSELECT DATA=train_encoded_final RATE=.8 OUTALL OUT=class2 SEED=42; RUN;

PROC FREQ DATA= class2; TABLES selected; RUN;

/* Create TRAIN and VAL datasets */
DATA train_data val_data;
  SET class2 ;
  IF selected = 1 THEN OUTPUT train_data; ELSE OUTPUT val_data;
RUN;

/* Assess target rate in train, val and OOT datasets */
PROC FREQ DATA = train_data; TABLES bad; RUN;
PROC FREQ DATA = val_data;  TABLES bad; RUN;
PROC FREQ DATA = oot_encoded_final;  TABLES bad; RUN; 

/* Balance the data by undersampling the majority class */
PROC FREQ DATA=train_data ;
  TABLES bad ;
RUN;

DATA pos neg;
  SET train_data;
  IF bad = 1 THEN OUTPUT pos; ELSE OUTPUT neg;
RUN;

DATA train_bal;
  SET pos neg(obs=6901); /*Input the number of positive cases*/
RUN;

PROC FREQ DATA=train_bal; TABLES bad; RUN;

/* Perform logistic regression with LASSO (L1) regularization */
PROC HPGENSELECT DATA=train_bal;
  MODEL bad(event='1') = &predictors / DIST=BINARY LINK=LOGIT;
  SELECTION METHOD=LASSO(CHOOSE=SBC);
  CODE FILE='/workspace/ccmod/u588348/log_model.sas';
  OUTPUT OUT=predicted PRED=pred_val;
RUN;

/* Apply the best model to the OOT dataset */
DATA oot_score;
  SET oot_encoded_final;
  %INCLUDE '/workspace/ccmod/u588348/log_model.sas';
  IF p_bad1 GE 0.5 THEN pred = 1; ELSE pred = 0;
RUN;

/* Create a confusion matrix */
PROC FREQ DATA=oot_score; TABLE pred*bad / NOCOL NOROW NOPERCENT; RUN;

/* Create an ROC chart */
ODS GRAPHICS ON;
PROC LOGISTIC DATA=oot_score PLOTS(ONLY)=ROC;
  MODEL bad(event='1') = p_bad1;
RUN;




#####################################################################################


/*Decision Tree Code:*/
/*LIBNAME james 'INPUT FILE PATHWAY';*/

/* Load the data */
DATA train_encoded;
  SET james.train_encoded;
RUN;

DATA oot_encoded;
  SET james.oot_encoded;
RUN;

/* Define the variables to exclude to avoid the dummy variable trap */
%LET excluded_variables = id bad emp_length_3years term_36months grade_g sub_grade_b4 
verification_status_sourceverifi purpose_home_improvement home_ownership_rent application_type_jointapp;

/* Create global variable for predictors */
PROC CONTENTS NOPRINT DATA = train_encoded (DROP= id bad &excluded_variables.) OUT = var (KEEP = name); RUN;
PROC SQL NOPRINT; SELECT name INTO:predictors SEPARATED BY " " FROM var; QUIT;
%PUT &predictors; RUN;

/* Variables in train_encoded but not in oot_encoded */
PROC SQL NOPRINT;
  CREATE TABLE train_vars AS SELECT name FROM dictionary.columns WHERE libname="WORK" AND memname="TRAIN_ENCODED";
  CREATE TABLE oot_vars AS SELECT name FROM dictionary.columns WHERE libname="WORK" AND memname="OOT_ENCODED";
  CREATE TABLE in_train_not_oot AS
  SELECT * FROM train_vars
  EXCEPT
  SELECT * FROM oot_vars;
QUIT;

/* Print the differences */
PROC PRINT DATA=in_train_not_oot; RUN;

/* Create final train and OOT datasets */
DATA train_encoded_final;
  SET train_encoded (KEEP=&predictors bad);
RUN;

PROC FREQ DATA=train_encoded_final; TABLE bad; RUN;

/*Create missing variables from TRAIN dataset*/
DATA oot_encoded_final;
  SET oot_encoded ;
  home_ownership_ANY = 0;
  purpose_wedding = 0;
  KEEP &predictors bad  home_ownership_ANY purpose_wedding;
RUN;

PROC FREQ DATA=oot_encoded_final; TABLE bad; RUN;

/* Split the modeling dataset by a 80/20 ratio using a random seed */
PROC SURVEYSELECT DATA=train_encoded_final RATE=.8 OUTALL OUT=class2 SEED=42; RUN;

PROC FREQ DATA= class2; TABLES selected; RUN;

/* Create TRAIN and VAL datasets */
DATA train_data val_data;
  SET class2 ;
  IF selected = 1 THEN OUTPUT train_data; ELSE OUTPUT val_data;
RUN;

/* Assess target rate in train, val and OOT datasets */
PROC FREQ DATA = train_data; TABLES bad; RUN;
PROC FREQ DATA = val_data;  TABLES bad; RUN;
PROC FREQ DATA = oot_encoded_final;  TABLES bad; RUN; 

/* Balance the data by undersampling the majority class */
PROC FREQ DATA=train_data ;
  TABLES bad ;
RUN;

DATA pos neg;
  SET train_data;
  IF bad = 1 THEN OUTPUT pos; ELSE OUTPUT neg;
RUN;

DATA train_bal;
  SET pos neg(obs=6901); /*Input the number of positive cases*/
RUN;

PROC FREQ DATA=train_bal; TABLES bad; RUN;

/*Create hyperparameter tuning macro that will loop through a range of values for each of the tuning parameters */

/* Create an empty summary_table dataset */
PROC DELETE DATA=summary_table;
DATA summary_table;
  LENGTH Model 8;
  FORMAT Area 8.5;
RUN;

%LET target = bad;

%MACRO tune(iteration, maxdepth, minleafsize);
  %put "Iteration: &iteration";
  %put "MAXDEPTH: &maxdepth";
  %put "MINLEAFSIZE: &minleafsize";

  /* Perform decision tree with hyperparameter tuning */
  PROC HPSPLIT DATA=train_bal
             MAXDEPTH = &maxdepth
             MINLEAFSIZE = &minleafsize;
    INPUT &predictors / LEVEL=INTERVAL;
    TARGET bad / LEVEL=NOMINAL;
    PRUNE COSTCOMPLEXITY;
    code file="/workspace/ccmod/u588348/decision_tree.sas";
  RUN;

  data test_score_&iteration.;
    set val_data;
    %include '/workspace/ccmod/u588348/decision_tree.sas';
	keep id &target. P_bad1;
  run;

  /* Calcuate AUC value on validation dataset */
  proc logistic data = test_score_&iteration.;
	class &target.;
	model &target. = P_bad1 / outroc=ROC;
	ROC;
	ODS OUTPUT ROCASSOCIATION = auc_out;
  run;

  data outstat;
    set auc_out;
    Model = &iteration.;
    where ROCModel = 'Model';
    keep Model Area;
  run;

  /* Append the results to a summary table */
  proc append base=summary_table data=outstat;
  run;

%mend;

/* Call the macro with different hyperparameters */
%tune(1, 5, 1);
%tune(2, 5, 2);
%tune(3, 5, 3);
%tune(4, 10, 1);
%tune(5, 10, 2);
%tune(6, 10, 3);
%tune(7, 20, 1);
%tune(8, 20, 2);
%tune(9, 20, 3);

PROC SORT DATA=summary_table; BY DESCENDING Area; RUN;

/*Apply optimal hyperparameters to the OOT dataset for final evaluation*/

PROC HPSPLIT DATA=train_bal
  MAXDEPTH = 5 /*Input optimal hyperparameter value*/
  MINLEAFSIZE = 1; /*Input optimal hyperparameter value*/
  INPUT &predictors / LEVEL=INTERVAL;
  TARGET bad / LEVEL=NOMINAL;
  PRUNE COSTCOMPLEXITY;
  code file="/workspace/ccmod/u588348/decision_tree.sas";
RUN;

/* Apply the final model to the OOT dataset */
DATA oot_score;
  SET oot_encoded;
  %INCLUDE '/workspace/ccmod/u588348/decision_tree.sas';
  KEEP id &target. P_bad1;
RUN;

/* Calcuate AUC value on validation dataset */
PROC LOGISTIC DATA = oot_score;
  CLASS &target.;
  MODEL &target. = P_bad1 / OUTROC=ROC;
  ROC;
  ODS OUTPUT ROCASSOCIATION = auc_out;
RUN;

